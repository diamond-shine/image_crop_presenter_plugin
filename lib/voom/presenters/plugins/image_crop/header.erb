<script src="https://cdn.jsdelivr.net/npm/croppr@2.3.1/dist/croppr.min.js"></script>
<style>
  <%= File.read(File.expand_path('cropper.css', __dir__)  ) %>
</style>
<script type="text/javascript">
  class ImageCrop {
    constructor(element) {
      // if Croppr doesn't load for whatever reason, never setup JS plugin
      if (typeof Croppr !== 'function') {
        return;
      }

      console.log('ImageCrop');

      this.element = element;
      this.image = this.element.querySelector('img');

      this.dataSet = this.element.dataset;
      this.handleCropEnd = this.handleCropEnd.bind(this);
      this.data = {};

      this.setupCropOptions();
      this.setupCroppr();
    }

    setupCropOptions() {
      const { pluginCallback, ...opts } = this.dataSet;

      const data = {};
      Object.keys(opts).forEach(function(k) {
        data[k] = Number(opts[k]) || opts[k];
      });
      this.cropprOptions = {onCropEnd: this.handleCropEnd, ...data};
    }

    setupCroppr() {
      this.croppr = new Croppr(this.image, this.cropprOptions);
    }

    handleCropEnd(data) {
      this.data = data;
      // create and dispatch the change event
      var event = new Event("change", { bubbles: true, detail: data });
      this.element.dispatchEvent(event);
    }

    // Called before the component is submitted via post/put. Allows the component to add its key/value pairs to the
    // submitted data.
    // If you provide this you need to add the v-input class to your DOM element to get called.
    // Containers iterate their elements that have the v-input class defined on them and invoke the prepareSubmit
    // function for each.
    prepareSubmit(params) {
      const keys = Object.keys(this.data);
      const data = this.data;
      keys.forEach(function(k) {
        params.push([k, data[k]]);
      });
    }

    // optional.
    // Called whenever a container is about to be submitted, before prepareSubmit.
    // returns true on success
    // returns on failure return an error object that can be processed by VErrors:
    //    { email: ["email must be filled", "email must be from your domain"] }
    //    { page:  ["must be filled"] }
    // Returning an error stops the submission.
    // validate(formData) {
    //   return true;
    // }

    // optional.
    // Clear's the control
    // clear() {
    // }
  }
</script>
